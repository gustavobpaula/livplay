//------------------------------------
//  MIXINS
//------------------------------------

// http://www.youtube.com/watch?v=umDr0mPuyQc


//JUSSI/CONCISE MIXIN
@import "mixins/breakpoint";
@import "mixins/box-sizing";
@import "mixins/box-shadow";
@import "mixins/font-size";
@import "mixins/gradient";
@import "mixins/replace-text";
@import "mixins/spinner";
@import "mixins/transition";
@import "mixins/clearfix";
@import "mixins/content-before";
@import "mixins/placeholder";
@import "mixins/row";
@import "mixins/mask";
@import "mixins/nth-child";

// Transition
// To use other value that isn't  default, set the
// first parameter like `false` and set the value
// of your choice on the second parameter.
//
@mixin singleTransition($default: true, $time: 250) {
	@if $default == true {
		@extend %single-transition;
	}

	@else {
		@extend %single-transition;
		transition-duration: #{$time}ms;
	}
}

@mixin opacity($value){
	$IEValue: $value*100;
	 -ms-filter: 'progid:DXImageTransform.Microsoft.Alpha(Opacity=' + $value + ')';
		 filter: alpha(opacity=$value);
   -moz-opacity: $value;
 -khtml-opacity: $value;
		opacity: $value;
}

@mixin replaceText ($bg-img, $x, $y) {
	background: transparent url($bg-img) $x $y no-repeat;
	overflow: hidden;
	text-indent: -99999cm;

	// Melhor para SEO
	// Testar essa t√©cnica:
	/*
		overflow: hidden;
		text-indent: 100%;
		white-space: nowrap;
	*/
}

@mixin simpleGradient($from-color, $to-color) {
	background-color: mix($from-color, $to-color); /* Fallback */
	background: -webkit-gradient(linear, 0% 0%, 0% 100%, from($from-color), to($to-color));
	background: -webkit-linear-gradient(to bottom, $from-color 0%, $to-color 100%);
	background:    -moz-linear-gradient(to bottom, $from-color 0%, $to-color 100%);
	background:     -ms-linear-gradient(to bottom, $from-color 0%, $to-color 100%);
	background:      -o-linear-gradient(to bottom, $from-color 0%, $to-color 100%);
	background:         linear-gradient(to bottom, $from-color 0%, $to-color 100%);
	-ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$from-color}', EndColorStr='#{$to-color}')";
}

@mixin wFull() {
	@extend %wFull;
}

@mixin contentBefore($content: "", $absolute: true) {
	content: "#{$content}";
	display: block;

	@if $absolute == true {
		position: absolute;
	}
}


// Just include in her context
@mixin inputPlaceholderColor( $color ) {
	::-webkit-input-placeholder { color: $color; }
	:-ms-input-placeholder      { color: $color; }
	::-moz-placeholder          { color: $color; }
	:-moz-placeholder           { color: $color; }
}

// Parameters:
//  $font-size: the font size (in pixels) to be converted to rem
//  $rem-sizing: if you want to convert the font-size to rem or not (default is true)
//  $line-height: set to false if you wish not to output a calculated line-height (defalt is true)
//
// Example: `@include font-size(24px);`
//
// Big thanks to inuitcss for inspiration behind this
// (https://github.com/csswizardry/inuit.css/blob/master/generic/_mixins.scss)
@mixin font-size($font-size, $rem-sizing: true, $line-height: false) {
	font-size: $font-size;

	@if $rem-sizing == true {
		font-size: calculate-rem($font-size);
	}

	@if $line-height == true {
		line-height: calculate-line-height($font-size);
	}
}

@mixin responsiveFont($font-size, $context: 16, $rem: false) {
	@if $rem == true {
		font-size: #{$font-size}px;
	}
	font-size: calculate-em($font-size, $context, $rem);
}

// Parameters:
//  $property: what CSS property to generate vendor prefixes for
//  $value: the value of what was defined in `$property`
//  $vendors: what vendor prefixes to generate (default is none)
//
// Example: `@include vendor(border-radius, 4px, webkit moz ms)`
//
@mixin vendor($property, $value, $vendors: webkit moz ms o) {
	@each $vendor in $vendors {
		@if $vendor != "" {
			-#{$vendor}-#{$property}: $value;
		}
	}

	#{$property}: $value;
}


//
// Loops through all of the values in the `$breakpoints`
// map and outputs conditional statements used to generate
// media query code.
//
// When calling the mixin, if the parameter matches a key
// from the `breakpoints` map, a media query is output with
// that key's value. If an explicit value is set (ex: 360px)
// then a media query is output with that value.
//
// Parameters:
//  $point: the breakpoint value for the media query output
//  $min-max: set whether `min` or `max` is used (default is `min`)
//
// Example:
//  `@include breakpoint(extra-small) { ... }`
//
//  `@include breakpoint(360px, max) { ... }`

@mixin breakpoint($point, $min-max: "min") {
	@if type-of($point) == string {
		@each $breakpoint-name, $breakpoint-value in $breakpoint-map {
			@if $point == $breakpoint-name {
				@media (#{$min-max}-width: $breakpoint-value) {
					@content;
				}
			}
		}
	} @else {
		@media (#{$min-max}-width: $point) {
			@content;
		}
	}
}


// Generates property media queries for any CSS property,
// value, and set of breakpoints. Allows you to easily change
// property values based a set of breakpoints.
//
// Parameters:
//  $properties: what CSS property to output inside of the media queries (can have multiple)
//  $values: the value for each property (can have multiple)
//  $responsive-values: what breakpoints to generate media queries for
//  $use-available-mixins: whether or not to use mixin outputs for properties like `font-size` or `line-height` (default is true)
//
// Example:
//  @include responsive("font-size", 11px,
//    (
//      "small" : 12px,
//        450px : 13px,
//       1100px : 14px,
//      "large" : 15px,
//       1600px : 16px,
//    )
//  );
//
// Big thanks to Max Luster for a great article about chained media
// queries that created the majority of this mixin.
// (https://bugsnag.com/blog/responsive-typography-with-chained-media-queries)
@mixin responsive($properties, $values, $responsive-values, $use-available-mixins: true) {
	@each $property in $properties {
		@if $property == "font-size" and $use-available-mixins == true {
			#{$property}: $values;
			#{$property}: ($values / $base-font-size) * 1rem;
		} @else if $property == "line-height" and $use-available-mixins == true {
			#{$property}: ceil($values / $base-line-height) * ($base-line-height / $values);
		} @else {
			#{$property}: $values;
		}
	}

	@each $breakpoint, $value in $responsive-values {
		@if type-of($breakpoint) == string {
			@if(map-has-key($breakpoint-map, $breakpoint)) {
				$breakpoint: map-get($breakpoint-map, $breakpoint);
			} @else {
				$breakpoint: "null";
				@warn "Couldn't find breakpoint: " + $breakpoint;
			}
		}

		@if $breakpoint != "null" {
			@media (min-width: $breakpoint) {
				@each $property in $properties {
					@if $property == "font-size" and $use-available-mixins == true {
						#{$property}: #{$value};
						#{$property}: ($value / $base-font-size) * 1rem;
					} @else if $property == "line-height" and $use-available-mixins == true {
						#{$property}: ceil($value / $base-line-height) * ($base-line-height / $value);
					} @else {
						#{$property}: #{$value};
					}
				}
			}
		}
	}
}


// Generates CSS to wrap semantic columns
// in a row.
//
// Example:
//  `@include row()`
//
@mixin row() {
	width: 100%;

	&:after {
		clear: both;
		content: " ";
		display: table;
	}
}


// Generates CSS for semantic columns.
//
// Parameters:
//   $column: the number of this particular column (determines width)
//   $number-columns: number of columns in the row (default is `$column-number`)
//   $first-column: set to `true` if it's the first column in a row (default is false)
//   $use-gutters: set to `true` if you want column gutters (default is false)
//   $gutter-value: percentage value of the gutters to be applied (default is `$gutters` variable)
//
// Example: `@include column(16, 4, false, true, 4)`
//

@mixin column($column, $number-columns: $column-number, $first-column: false, $use-gutters: false, $gutter-value: strip-units($gutters)) {
	background-clip: padding-box;

	@include breakpoint(small) {
		@if $use-gutters == true {
			$gutter-size: percentage($gutter-value) * 0.01;
			$width-of-column: (100% - $gutter-size * ($number-columns - 1)) / $number-columns;

			float: left;
			@if $first-column == false {
				margin-left: $gutter-size;
			}
			width: $width-of-column * $column + $gutter-size * ($column - 1);
		} @else {
			float: left;
			width: percentage(100 / $number-columns * $column) * .01;
		}
	}
}


// Generates CSS for pushing a semantic column left or right.
//
// Parameters:
//   $option: set to `push` or `pull` to generate proper styles
//   $column: the column number
//   $number-columns: the number of columns in the row (default is $column-number)
//   $use-gutters: set to `true` if your column has gutters (default is false)
//   $gutter-value: percentage value of the gutters to be applied (default is `$gutters` variable)
//
// Example: `@include push-pull(push, 4, 16, true)`

@mixin push-pull($option, $column, $number-columns: $column-number, $use-gutters: false, $gutter-value: strip-units($gutters)) {
	$property: "";

	@if $option == "push" {
		$property: "left";
	} @else {
		$property: "right";
	}

	@if $use-gutters == true {
		#{$property}: 100% / $number-columns * $column - $gutter-value;
	} @else {
		#{$property}: 100% / $number-columns * $column;
	}
}


// Generates CSS that will clear both left
// and right floats.
//
// Example: `@include clearfix()`

@mixin clearfix() {
	& {
		&:after{
			content: "";
			clear: both;
			display: table;
		}
	}
}


// Create variable-number grid columns given the value
// for variable `$column-number`.
//
// NOTE:
//   This is a setup mixin for the Concise grid. If you
//   wish to set up a grid, please use the `row()` and
//   `column()` mixins.

@mixin grid-setup($number: $column-number) {
	@for $i from 1 through $number {
		$column-width-gutters: (100% - $gutters * ($number - 1)) / $number;

		.#{$column-prefix + $i},
		.gutters .gutters-off .#{$column-prefix + $i} {
			width: 100% / $number * $i;
		}

		.gutters .#{$column-prefix + $i} {
			width: $column-width-gutters * $i + $gutters * ($i - 1);
		}
	}
}


// Create `.push-` and `.pull-` classes given
// the value for variabls `$option` and
// `$column-number`.
//
// NOTE:
//   This is a setup mixin for the push and pull
//   functionality in the Concise grid. If you wish
//   to use that functionality, please use the
//   `push-pull()` mixin.

@mixin push-pull-setup($option, $number: $column-number) {
	$property: "";

	@if $option == "push" {
		$property: "left";
	} @else {
		$property: "right";
	}

	@for $i from 1 to $number {
		.#{$option}-#{$i} {
			#{$property}: 100% / $number * $i;

			.gutters & {
				#{$property}: 100% / $number * $i - $gutters;
			}
		}
	}
}




@mixin spinner(
	$color: red,
	$diameter: 25px,
	$stroke: 2px,
	$background-color: #eee,
	$sides: 2
){
	@include vendor(border-radius, 100%);
	@include vendor(animation, rotation .7s linear infinite);
	border: $stroke solid $background-color;
	border-top-color: $color;
	display: inline-block;
	font-size: $diameter;
	height: 1em;
	padding-top: ($diameter/2);
	position: relative;
	top: 20%;
	width: 1em!important;
	@if $sides >= 2 {
		border-right-color: $color;
	}
	@if $sides >= 3 {
		border-bottom-color: $color;
	}
}

@mixin keyframes($name) {
	@-webkit-keyframes #{$name} { @content; }
	@-moz-keyframes #{$name} { @content; }
	@-o-keyframes #{$name} { @content; }
	@keyframes #{$name} { @content; }
}

@mixin mask() {
	@include vendor(transition, background 400ms ease-out 170ms);
	background-color: #000;
	width: 100%
}